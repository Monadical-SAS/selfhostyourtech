services:
  postgresql:
    image: postgres:16-alpine
    volumes:
      - ./data/postgresql:/var/lib/postgresql/data
    env_file:
     - ./.env
    environment:
      POSTGRES_PASSWORD: ${PG_PASS}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_DB: ${PG_DB}
    networks:
      - authentik-internal

  redis:
    image: redis:alpine
    command: --save 60 1 --loglevel warning
    volumes:
      - ./data/redis:/data
    networks:
      - authentik-internal

  authentik-proxy:
    image: ghcr.io/goauthentik/server
    ports:
      - 9000:9000
      - 9443:9443
    command: server
    env_file:
     - ./.env
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      # AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      # AUTHENTIK_EMAIL__PORT: "587"
      # AUTHENTIK_EMAIL__HOST: ${SMTP_HOST}
      # AUTHENTIK_EMAIL__USERNAME: ${SMTP_USERNAME}
      # AUTHENTIK_EMAIL__PASSWORD: ${SMTP_PASSWORD}
      # AUTHENTIK_EMAIL__USE_TLS: "true"
      # AUTHENTIK_EMAIL__FROM: ${EMAIL_FROM}
      # AUTHENTIK_EMAIL__TIMEOUT: "10"
    volumes:
      - ./data/media:/media
      - ./data/templates:/templates
    depends_on:
      - postgresql
      - redis
    networks:
      - traefik-public
      - authentik-internal
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      # Define the service explicitly
      - traefik.http.services.authentik.loadbalancer.server.port=9000
      # HTTP router
      - traefik.http.routers.authentik.rule=Host(`authentik.${BASE_DOMAIN}`)
      - traefik.http.routers.authentik.entrypoints=web
      - traefik.http.routers.authentik.middlewares=redirect-to-https
      # HTTPS router
      - traefik.http.routers.authentik-secure.rule=Host(`authentik.${BASE_DOMAIN}`)
      - traefik.http.routers.authentik-secure.entrypoints=websecure
      - traefik.http.routers.authentik-secure.tls=true
      - traefik.http.routers.authentik-secure.tls.certresolver=letsencrypt
      - traefik.http.routers.authentik-secure.service=authentik
      # Outpost endpoints
      - traefik.http.routers.authentik-outpost.rule=HostRegexp(`{subdomain:[a-zA-Z0-9-]+}.${BASE_DOMAIN}`) && PathPrefix(`/outpost.goauthentik.io/`)
      - traefik.http.routers.authentik-outpost.entrypoints=websecure
      - traefik.http.routers.authentik-outpost.tls=true
      - traefik.http.routers.authentik-outpost.tls.certresolver=letsencrypt
      # HTTPS redirect middleware
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      - traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true
      # Forward auth configuration
      - traefik.http.middlewares.authentik.forwardauth.address=http://authentik-proxy:9000/outpost.goauthentik.io/auth/traefik
      - traefik.http.middlewares.authentik.forwardauth.trustForwardHeader=true
      - traefik.http.middlewares.authentik.forwardauth.authResponseHeaders=X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid,X-authentik-jwt,X-authentik-meta-jwks,X-authentik-meta-outpost,X-authentik-meta-provider,X-authentik-meta-app,X-authentik-meta-version
  worker:
    env_file:
     - ./.env
    image: ghcr.io/goauthentik/server
    command: worker
    user: root
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
    volumes:
      - ./etc/certs:/certs
      - ./data/media:/media
      - ./data/templates:/templates
    depends_on:
      - postgresql
      - redis
    networks:
      - traefik-public
      - authentik-internal

networks:
  traefik-public:
    external: true
  authentik-internal:
    internal: true